generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Model for the users of the system (Students, Tutors/Admins)
model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  name         String
  password     String
  profileImage String?
  role         Role          @default(STUDENT)
  submissions  Submission[] // Assignments submitted by students
  quizAttempts QuizAttempt[] // Track student quiz attempts
  projects     Project[] // GitHub project submissions
  active       Boolean       @default(true) // Indicates if the user is active
  lastLogin    DateTime?
  loggedIn     Boolean       @default(false)
  grading      Grading[]
  certificates Certificate[]
}

// Enum to define roles for users
enum Role {
  STUDENT
  ADMIN // Also considered as Tutors
}

// Model for assignments that tutors/admins can create
model Assignment {
  id          Int          @id @default(autoincrement())
  title       String
  description String       @db.Text
  deadline    DateTime
  createdAt   DateTime     @default(now())
  submissions Submission[] // Student submissions for this assignment
  projects    Project[] // GitHub projects linked to the assignment
}

// Model to store student submissions (including GitHub project link)
model Submission {
  id             Int        @id @default(autoincrement())
  content        String     @db.Text
  user           User       @relation(fields: [userId], references: [id])
  userId         Int
  assignment     Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId   Int
  grading        Grading[]
  file           String?
  submissionDate DateTime   @default(now())
}

// Model for quizzes
model Quiz {
  id             Int           @id @default(autoincrement())
  title          String
  description    String
  totalQuestions Int
  quizAttempts   QuizAttempt[] // Track attempts on this quiz
  questions      Question[] // Relationship to questions
  grading Grading[]
}

// Model for quiz questions
model Question {
  id            Int          @id @default(autoincrement())
  text          String
  correctOption Int? // Index of the correct option (0-based)
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId        Int
  options       QuizOption[] // Relationship to options
}

// Model for multiple choice quiz options
model QuizOption {
  id         Int      @id @default(autoincrement())
  text       String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
}

// Model for tracking quiz attempts
model QuizAttempt {
  id      Int       @id @default(autoincrement())
  score   Int
  createdAt DateTime  @default(now())
  user    User      @relation(fields: [userId], references: [id])
  userId  Int
  quiz    Quiz      @relation(fields: [quizId], references: [id], map: "Quiz__QuizAttempt") // Define the relation back to Quiz
  quizId  Int
  grading Grading[]
}

// Model to store GitHub projects
model Project {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  githubLink   String // Link to the GitHub repository
  user         User       @relation(fields: [userId], references: [id], map: "User__Project")
  userId       Int
  assignment   Assignment? @relation(fields: [assignmentId], references: [id], map: "Assignment__Project")
  assignmentId Int
  projectImages String?
  grading       Grading[]     
}

// Model for storing grades (if you want to separate this from submission)
model Grading {
  id           Int           @id @default(autoincrement())
  submission   Submission?    @relation(fields: [submissionId], references: [id], map: "Submission__Grading")
  submissionId Int?
  assignmentId Int?
  grade        Int
  feedback     String
  user         User          @relation(fields: [userId], references: [id])
  userId       Int 
  quiz          Quiz?          @relation(fields: [quizId], references: [id], map: "Quiz__Grading")         
  quizId        Int?          
  quizAttempts QuizAttempt[]
  project      Project?      @relation(fields: [projectId], references: [id], map: "Project__Grading")
  projectId    Int?
}

model CertificateMintStatus {
  id           Int       @id @default(autoincrement())
  allowed      Boolean   @default(false) // Global flag for certificate minting
  updatedAt    DateTime  @updatedAt // Track last update for auditing
}

model Certificate {
  id           Int       @id @default(autoincrement())
  to           String    
  tokenId      Int
  institution  String
  courseName   String
  issueDate    DateTime
  user         User      @relation(fields: [userId], references: [id])
  userId       Int

  @@map("Certificate")
}